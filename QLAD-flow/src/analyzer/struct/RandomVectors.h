/*
 * This file is part of the DNS traffic analyser project.
 *
 * Copyright (C) 2011 CZ.NIC, z.s.p.o.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "struct/SafeGrowTable.h"

/*!
 * @class RandomVectors RandomVectors.h "struct/RandomVectors.h"
 * @brief Class providing indexed vectors of random values.
 * @tparam T Type of values in random vectors.
 * @tparam LINE_SIZE Number of values in one vector.
 * @tparam GENERATOR Random number generator to use for vector generation.
 *
 * Type T needs default constructor and assignment operator for values
 * generated by GENERATOR.
 */
template<typename T, size_t LINE_SIZE, class GENERATOR>
class RandomVectors
{
public:
	/*!
	 * @brief Does nothing.
	 *
	 * Only here because copy constructor is protected.
	 */
	RandomVectors() {};

	/*! @brief Removes all created vectors. */
	~RandomVectors();

	/*!
	 * @brief Gets random vector.
	 * @param index Index of requested vector.
	 * @return Pointer to at least LINE_SIZE elements.
	 *
	 * The same pointer will be returned for every call of
	 * this function. RandomVectors will not invalidate this pointer
	 * in its life.
	 */
	const T * get( unsigned index );

protected:
	/*!
	 * @brief Generates additional random vectors.
	 * @param index Index of the last vector to generate.
	 */
	void addVectors( unsigned index );

	/*! @brief DO NOT COPY! */
	RandomVectors( const RandomVectors & );
	/*! @brief DO NOT COPY! */
	RandomVectors & operator = ( const RandomVectors & );

	/*! @brief Table to store generated vectors. */
	SafeGrowTable<T*> mTable;
};
/* -------------------------------------------------------------------------- */
/* IMPLEMENTATION */
/* -------------------------------------------------------------------------- */
template<typename T, size_t LINE_SIZE, class GENERATOR>
RandomVectors<T, LINE_SIZE, GENERATOR>::~RandomVectors()
{
   for (unsigned i = 0; i < mTable.size(); ++i)
      { delete[] mTable.read( i ); }
}
/* -------------------------------------------------------------------------- */
template<typename T, size_t LINE_SIZE, class GENERATOR>
const T * RandomVectors<T, LINE_SIZE, GENERATOR>::get( unsigned index )
{
	const T *line;

	/*
	 * Value returned by size() might be already invalid so speculate here
	 * if we are wrong, addVectors will know it.
	 */
	if (index >= mTable.size())
		{ addVectors ( index ); }

	/*
	 * NULL means some other thread is working on this
	 * as the table is already resized
	 */
	while (!(line = mTable.read( index )))
		{ Thread::yield(); }

	return line;
}
/* -------------------------------------------------------------------------- */
template<typename T, size_t LINE_SIZE, class GENERATOR>
void RandomVectors<T, LINE_SIZE, GENERATOR>::addVectors( unsigned index )
{
	const size_t new_size = index + 1;
	const size_t old_size = mTable.grow( new_size );

	/*
	 * Someone must have done our job,
	 * he will fill the NULL pointers too.
	 */
	if (index < old_size)
		{ return; }

	GENERATOR rng;
	for (unsigned i = old_size; i < new_size; ++i) {
		rng.seed( i + 1 );

		T *line = new T[LINE_SIZE];
		for (unsigned j = 0; j < LINE_SIZE; ++j)
			{ line[j] = rng(); }

		/*
		 * Although the actual size may now be greater than new_size,
		 * no one touched pointers in the interval (old_size, new_size)
		 */
		assert( mTable.read(i) == NULL );
    mTable.write( i, line );
  }
}
